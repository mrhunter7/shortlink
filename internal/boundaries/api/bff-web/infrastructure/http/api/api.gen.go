// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// AddRequest defines model for AddRequest.
type AddRequest struct {
	// Describe Optional description of the link.
	Describe *string `json:"describe,omitempty"`

	// Url The URL to be shortened.
	Url string `json:"url"`
}

// AddResponse defines model for AddResponse.
type AddResponse struct {
	Link *Link `json:"link,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Error code representing the type of error.
	Code *int32 `json:"code,omitempty"`

	// Message Human-readable message providing more details about the error.
	Message *string `json:"message,omitempty"`
}

// GetResponse Response schema for a single link retrieval.
type GetResponse struct {
	Link *Link `json:"link,omitempty"`
}

// Link defines model for Link.
type Link struct {
	// CreatedAt Timestamp when the link was created.
	CreatedAt time.Time `json:"created_at"`

	// Describe Description of the link.
	Describe *string `json:"describe,omitempty"`

	// Hash Unique hash identifier for the link.
	Hash string `json:"hash"`

	// UpdatedAt Timestamp when the link was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Url The original URL.
	Url string `json:"url"`
}

// ListResponse defines model for ListResponse.
type ListResponse struct {
	Links *[]Link `json:"links,omitempty"`
}

// UpdateRequest defines model for UpdateRequest.
type UpdateRequest struct {
	// Describe Updated description of the link.
	Describe *string `json:"describe,omitempty"`

	// Url The new URL to update.
	Url string `json:"url"`
}

// UpdateResponse defines model for UpdateResponse.
type UpdateResponse struct {
	Link *Link `json:"link,omitempty"`
}

// HashParam defines model for HashParam.
type HashParam = string

// BadRequest defines model for BadRequest.
type BadRequest = ErrorResponse

// InternalServerError defines model for InternalServerError.
type InternalServerError = ErrorResponse

// LinkCreated defines model for LinkCreated.
type LinkCreated = AddResponse

// LinkDetails Response schema for a single link retrieval.
type LinkDetails = GetResponse

// LinkUpdated defines model for LinkUpdated.
type LinkUpdated = UpdateResponse

// NotFound defines model for NotFound.
type NotFound = ErrorResponse

// AddLinkJSONRequestBody defines body for AddLink for application/json ContentType.
type AddLinkJSONRequestBody = AddRequest

// UpdateLinkJSONRequestBody defines body for UpdateLink for application/json ContentType.
type UpdateLinkJSONRequestBody = UpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List links
	// (GET /links)
	ListLinks(w http.ResponseWriter, r *http.Request)
	// Add link
	// (POST /links)
	AddLink(w http.ResponseWriter, r *http.Request)
	// Delete link
	// (DELETE /links/{hash})
	DeleteLink(w http.ResponseWriter, r *http.Request, hash HashParam)
	// Get link
	// (GET /links/{hash})
	GetLink(w http.ResponseWriter, r *http.Request, hash HashParam)
	// Update link
	// (PUT /links/{hash})
	UpdateLink(w http.ResponseWriter, r *http.Request, hash HashParam)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List links
// (GET /links)
func (_ Unimplemented) ListLinks(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add link
// (POST /links)
func (_ Unimplemented) AddLink(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete link
// (DELETE /links/{hash})
func (_ Unimplemented) DeleteLink(w http.ResponseWriter, r *http.Request, hash HashParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get link
// (GET /links/{hash})
func (_ Unimplemented) GetLink(w http.ResponseWriter, r *http.Request, hash HashParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update link
// (PUT /links/{hash})
func (_ Unimplemented) UpdateLink(w http.ResponseWriter, r *http.Request, hash HashParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListLinks operation middleware
func (siw *ServerInterfaceWrapper) ListLinks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLinks(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddLink operation middleware
func (siw *ServerInterfaceWrapper) AddLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddLink(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteLink operation middleware
func (siw *ServerInterfaceWrapper) DeleteLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, chi.URLParam(r, "hash"), &hash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLink(w, r, hash)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLink operation middleware
func (siw *ServerInterfaceWrapper) GetLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, chi.URLParam(r, "hash"), &hash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLink(w, r, hash)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateLink operation middleware
func (siw *ServerInterfaceWrapper) UpdateLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, chi.URLParam(r, "hash"), &hash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLink(w, r, hash)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/links", wrapper.ListLinks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/links", wrapper.AddLink)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/links/{hash}", wrapper.DeleteLink)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/links/{hash}", wrapper.GetLink)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/links/{hash}", wrapper.UpdateLink)
	})

	return r
}
