// Code generated by mockery v2.36.1. DO NOT EDIT.

package v1

import (
	context "context"

	v1 "github.com/authzed/authzed-go/proto/authzed/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockPermissionsServiceServer is an autogenerated mock type for the PermissionsServiceServer type
type MockPermissionsServiceServer struct {
	mock.Mock
}

type MockPermissionsServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPermissionsServiceServer) EXPECT() *MockPermissionsServiceServer_Expecter {
	return &MockPermissionsServiceServer_Expecter{mock: &_m.Mock}
}

// CheckPermission provides a mock function with given fields: _a0, _a1
func (_m *MockPermissionsServiceServer) CheckPermission(_a0 context.Context, _a1 *v1.CheckPermissionRequest) (*v1.CheckPermissionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.CheckPermissionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CheckPermissionRequest) (*v1.CheckPermissionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CheckPermissionRequest) *v1.CheckPermissionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CheckPermissionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.CheckPermissionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPermissionsServiceServer_CheckPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPermission'
type MockPermissionsServiceServer_CheckPermission_Call struct {
	*mock.Call
}

// CheckPermission is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1.CheckPermissionRequest
func (_e *MockPermissionsServiceServer_Expecter) CheckPermission(_a0 interface{}, _a1 interface{}) *MockPermissionsServiceServer_CheckPermission_Call {
	return &MockPermissionsServiceServer_CheckPermission_Call{Call: _e.mock.On("CheckPermission", _a0, _a1)}
}

func (_c *MockPermissionsServiceServer_CheckPermission_Call) Run(run func(_a0 context.Context, _a1 *v1.CheckPermissionRequest)) *MockPermissionsServiceServer_CheckPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.CheckPermissionRequest))
	})
	return _c
}

func (_c *MockPermissionsServiceServer_CheckPermission_Call) Return(_a0 *v1.CheckPermissionResponse, _a1 error) *MockPermissionsServiceServer_CheckPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPermissionsServiceServer_CheckPermission_Call) RunAndReturn(run func(context.Context, *v1.CheckPermissionRequest) (*v1.CheckPermissionResponse, error)) *MockPermissionsServiceServer_CheckPermission_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRelationships provides a mock function with given fields: _a0, _a1
func (_m *MockPermissionsServiceServer) DeleteRelationships(_a0 context.Context, _a1 *v1.DeleteRelationshipsRequest) (*v1.DeleteRelationshipsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.DeleteRelationshipsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DeleteRelationshipsRequest) (*v1.DeleteRelationshipsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DeleteRelationshipsRequest) *v1.DeleteRelationshipsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DeleteRelationshipsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DeleteRelationshipsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPermissionsServiceServer_DeleteRelationships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRelationships'
type MockPermissionsServiceServer_DeleteRelationships_Call struct {
	*mock.Call
}

// DeleteRelationships is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1.DeleteRelationshipsRequest
func (_e *MockPermissionsServiceServer_Expecter) DeleteRelationships(_a0 interface{}, _a1 interface{}) *MockPermissionsServiceServer_DeleteRelationships_Call {
	return &MockPermissionsServiceServer_DeleteRelationships_Call{Call: _e.mock.On("DeleteRelationships", _a0, _a1)}
}

func (_c *MockPermissionsServiceServer_DeleteRelationships_Call) Run(run func(_a0 context.Context, _a1 *v1.DeleteRelationshipsRequest)) *MockPermissionsServiceServer_DeleteRelationships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.DeleteRelationshipsRequest))
	})
	return _c
}

func (_c *MockPermissionsServiceServer_DeleteRelationships_Call) Return(_a0 *v1.DeleteRelationshipsResponse, _a1 error) *MockPermissionsServiceServer_DeleteRelationships_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPermissionsServiceServer_DeleteRelationships_Call) RunAndReturn(run func(context.Context, *v1.DeleteRelationshipsRequest) (*v1.DeleteRelationshipsResponse, error)) *MockPermissionsServiceServer_DeleteRelationships_Call {
	_c.Call.Return(run)
	return _c
}

// ExpandPermissionTree provides a mock function with given fields: _a0, _a1
func (_m *MockPermissionsServiceServer) ExpandPermissionTree(_a0 context.Context, _a1 *v1.ExpandPermissionTreeRequest) (*v1.ExpandPermissionTreeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.ExpandPermissionTreeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ExpandPermissionTreeRequest) (*v1.ExpandPermissionTreeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ExpandPermissionTreeRequest) *v1.ExpandPermissionTreeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ExpandPermissionTreeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ExpandPermissionTreeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPermissionsServiceServer_ExpandPermissionTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpandPermissionTree'
type MockPermissionsServiceServer_ExpandPermissionTree_Call struct {
	*mock.Call
}

// ExpandPermissionTree is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1.ExpandPermissionTreeRequest
func (_e *MockPermissionsServiceServer_Expecter) ExpandPermissionTree(_a0 interface{}, _a1 interface{}) *MockPermissionsServiceServer_ExpandPermissionTree_Call {
	return &MockPermissionsServiceServer_ExpandPermissionTree_Call{Call: _e.mock.On("ExpandPermissionTree", _a0, _a1)}
}

func (_c *MockPermissionsServiceServer_ExpandPermissionTree_Call) Run(run func(_a0 context.Context, _a1 *v1.ExpandPermissionTreeRequest)) *MockPermissionsServiceServer_ExpandPermissionTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.ExpandPermissionTreeRequest))
	})
	return _c
}

func (_c *MockPermissionsServiceServer_ExpandPermissionTree_Call) Return(_a0 *v1.ExpandPermissionTreeResponse, _a1 error) *MockPermissionsServiceServer_ExpandPermissionTree_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPermissionsServiceServer_ExpandPermissionTree_Call) RunAndReturn(run func(context.Context, *v1.ExpandPermissionTreeRequest) (*v1.ExpandPermissionTreeResponse, error)) *MockPermissionsServiceServer_ExpandPermissionTree_Call {
	_c.Call.Return(run)
	return _c
}

// LookupResources provides a mock function with given fields: _a0, _a1
func (_m *MockPermissionsServiceServer) LookupResources(_a0 *v1.LookupResourcesRequest, _a1 v1.PermissionsService_LookupResourcesServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.LookupResourcesRequest, v1.PermissionsService_LookupResourcesServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPermissionsServiceServer_LookupResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupResources'
type MockPermissionsServiceServer_LookupResources_Call struct {
	*mock.Call
}

// LookupResources is a helper method to define mock.On call
//   - _a0 *v1.LookupResourcesRequest
//   - _a1 v1.PermissionsService_LookupResourcesServer
func (_e *MockPermissionsServiceServer_Expecter) LookupResources(_a0 interface{}, _a1 interface{}) *MockPermissionsServiceServer_LookupResources_Call {
	return &MockPermissionsServiceServer_LookupResources_Call{Call: _e.mock.On("LookupResources", _a0, _a1)}
}

func (_c *MockPermissionsServiceServer_LookupResources_Call) Run(run func(_a0 *v1.LookupResourcesRequest, _a1 v1.PermissionsService_LookupResourcesServer)) *MockPermissionsServiceServer_LookupResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.LookupResourcesRequest), args[1].(v1.PermissionsService_LookupResourcesServer))
	})
	return _c
}

func (_c *MockPermissionsServiceServer_LookupResources_Call) Return(_a0 error) *MockPermissionsServiceServer_LookupResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPermissionsServiceServer_LookupResources_Call) RunAndReturn(run func(*v1.LookupResourcesRequest, v1.PermissionsService_LookupResourcesServer) error) *MockPermissionsServiceServer_LookupResources_Call {
	_c.Call.Return(run)
	return _c
}

// LookupSubjects provides a mock function with given fields: _a0, _a1
func (_m *MockPermissionsServiceServer) LookupSubjects(_a0 *v1.LookupSubjectsRequest, _a1 v1.PermissionsService_LookupSubjectsServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.LookupSubjectsRequest, v1.PermissionsService_LookupSubjectsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPermissionsServiceServer_LookupSubjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupSubjects'
type MockPermissionsServiceServer_LookupSubjects_Call struct {
	*mock.Call
}

// LookupSubjects is a helper method to define mock.On call
//   - _a0 *v1.LookupSubjectsRequest
//   - _a1 v1.PermissionsService_LookupSubjectsServer
func (_e *MockPermissionsServiceServer_Expecter) LookupSubjects(_a0 interface{}, _a1 interface{}) *MockPermissionsServiceServer_LookupSubjects_Call {
	return &MockPermissionsServiceServer_LookupSubjects_Call{Call: _e.mock.On("LookupSubjects", _a0, _a1)}
}

func (_c *MockPermissionsServiceServer_LookupSubjects_Call) Run(run func(_a0 *v1.LookupSubjectsRequest, _a1 v1.PermissionsService_LookupSubjectsServer)) *MockPermissionsServiceServer_LookupSubjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.LookupSubjectsRequest), args[1].(v1.PermissionsService_LookupSubjectsServer))
	})
	return _c
}

func (_c *MockPermissionsServiceServer_LookupSubjects_Call) Return(_a0 error) *MockPermissionsServiceServer_LookupSubjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPermissionsServiceServer_LookupSubjects_Call) RunAndReturn(run func(*v1.LookupSubjectsRequest, v1.PermissionsService_LookupSubjectsServer) error) *MockPermissionsServiceServer_LookupSubjects_Call {
	_c.Call.Return(run)
	return _c
}

// ReadRelationships provides a mock function with given fields: _a0, _a1
func (_m *MockPermissionsServiceServer) ReadRelationships(_a0 *v1.ReadRelationshipsRequest, _a1 v1.PermissionsService_ReadRelationshipsServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.ReadRelationshipsRequest, v1.PermissionsService_ReadRelationshipsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPermissionsServiceServer_ReadRelationships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadRelationships'
type MockPermissionsServiceServer_ReadRelationships_Call struct {
	*mock.Call
}

// ReadRelationships is a helper method to define mock.On call
//   - _a0 *v1.ReadRelationshipsRequest
//   - _a1 v1.PermissionsService_ReadRelationshipsServer
func (_e *MockPermissionsServiceServer_Expecter) ReadRelationships(_a0 interface{}, _a1 interface{}) *MockPermissionsServiceServer_ReadRelationships_Call {
	return &MockPermissionsServiceServer_ReadRelationships_Call{Call: _e.mock.On("ReadRelationships", _a0, _a1)}
}

func (_c *MockPermissionsServiceServer_ReadRelationships_Call) Run(run func(_a0 *v1.ReadRelationshipsRequest, _a1 v1.PermissionsService_ReadRelationshipsServer)) *MockPermissionsServiceServer_ReadRelationships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.ReadRelationshipsRequest), args[1].(v1.PermissionsService_ReadRelationshipsServer))
	})
	return _c
}

func (_c *MockPermissionsServiceServer_ReadRelationships_Call) Return(_a0 error) *MockPermissionsServiceServer_ReadRelationships_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPermissionsServiceServer_ReadRelationships_Call) RunAndReturn(run func(*v1.ReadRelationshipsRequest, v1.PermissionsService_ReadRelationshipsServer) error) *MockPermissionsServiceServer_ReadRelationships_Call {
	_c.Call.Return(run)
	return _c
}

// WriteRelationships provides a mock function with given fields: _a0, _a1
func (_m *MockPermissionsServiceServer) WriteRelationships(_a0 context.Context, _a1 *v1.WriteRelationshipsRequest) (*v1.WriteRelationshipsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.WriteRelationshipsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.WriteRelationshipsRequest) (*v1.WriteRelationshipsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.WriteRelationshipsRequest) *v1.WriteRelationshipsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.WriteRelationshipsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.WriteRelationshipsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPermissionsServiceServer_WriteRelationships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteRelationships'
type MockPermissionsServiceServer_WriteRelationships_Call struct {
	*mock.Call
}

// WriteRelationships is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1.WriteRelationshipsRequest
func (_e *MockPermissionsServiceServer_Expecter) WriteRelationships(_a0 interface{}, _a1 interface{}) *MockPermissionsServiceServer_WriteRelationships_Call {
	return &MockPermissionsServiceServer_WriteRelationships_Call{Call: _e.mock.On("WriteRelationships", _a0, _a1)}
}

func (_c *MockPermissionsServiceServer_WriteRelationships_Call) Run(run func(_a0 context.Context, _a1 *v1.WriteRelationshipsRequest)) *MockPermissionsServiceServer_WriteRelationships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.WriteRelationshipsRequest))
	})
	return _c
}

func (_c *MockPermissionsServiceServer_WriteRelationships_Call) Return(_a0 *v1.WriteRelationshipsResponse, _a1 error) *MockPermissionsServiceServer_WriteRelationships_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPermissionsServiceServer_WriteRelationships_Call) RunAndReturn(run func(context.Context, *v1.WriteRelationshipsRequest) (*v1.WriteRelationshipsResponse, error)) *MockPermissionsServiceServer_WriteRelationships_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedPermissionsServiceServer provides a mock function with given fields:
func (_m *MockPermissionsServiceServer) mustEmbedUnimplementedPermissionsServiceServer() {
	_m.Called()
}

// MockPermissionsServiceServer_mustEmbedUnimplementedPermissionsServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedPermissionsServiceServer'
type MockPermissionsServiceServer_mustEmbedUnimplementedPermissionsServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedPermissionsServiceServer is a helper method to define mock.On call
func (_e *MockPermissionsServiceServer_Expecter) mustEmbedUnimplementedPermissionsServiceServer() *MockPermissionsServiceServer_mustEmbedUnimplementedPermissionsServiceServer_Call {
	return &MockPermissionsServiceServer_mustEmbedUnimplementedPermissionsServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedPermissionsServiceServer")}
}

func (_c *MockPermissionsServiceServer_mustEmbedUnimplementedPermissionsServiceServer_Call) Run(run func()) *MockPermissionsServiceServer_mustEmbedUnimplementedPermissionsServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPermissionsServiceServer_mustEmbedUnimplementedPermissionsServiceServer_Call) Return() *MockPermissionsServiceServer_mustEmbedUnimplementedPermissionsServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPermissionsServiceServer_mustEmbedUnimplementedPermissionsServiceServer_Call) RunAndReturn(run func()) *MockPermissionsServiceServer_mustEmbedUnimplementedPermissionsServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPermissionsServiceServer creates a new instance of MockPermissionsServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPermissionsServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPermissionsServiceServer {
	mock := &MockPermissionsServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
