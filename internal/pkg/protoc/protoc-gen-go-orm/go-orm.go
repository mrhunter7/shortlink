package main

import (
	"fmt"
	"log"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	version        = "1.0.0"
	commonFilename = "_common_types.orm.go" // Name of the file where common types are defined
)

func main() {
	log.Println("protoc-go-orm version", version, "is called")

	// The main function runs the plugin.
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		log.Println("Running with protoc version:", protocVersion(gen))

		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}

			// Generate the common types file
			generateCommonFile(gen, f)

			// Generate ORM
			generateFile(gen, f)
		}
		return nil
	})
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + ".orm.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-orm. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-orm v" + version)
	g.P("// - protoc             ", protocVersion(gen))
	g.P("// source: ", file.Desc.Path())
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	processFile(file, g)
}

func processFile(file *protogen.File, g *protogen.GeneratedFile) {
	for _, message := range file.Messages {
		generateStructForMessage(message, g)
	}
}

func generateStructForMessage(message *protogen.Message, g *protogen.GeneratedFile) {
	structName := "Filter" + message.GoIdent.GoName
	g.P("type ", structName, " struct {")
	for _, field := range message.Fields {
		if field.Desc.IsList() || field.Desc.IsMap() {
			// Skipping list or map fields for simplicity
			continue
		}

		fieldName := field.GoName
		goType := "StringFilterInput" // assuming all fields are converted to StringFilterInput

		// Make the field a pointer
		goType = "*" + goType

		g.P(fieldName, " ", goType, " `json:\"", strings.ToLower(fieldName), "\"`")
	}

	// Optionally, add pagination fields
	g.P("Pagination ", "*Pagination", " `json:\"pagination,omitempty\"`")
	g.P("}")
	g.P()
}

func generateCommonFile(gen *protogen.Plugin, file *protogen.File) {
	g := gen.NewGeneratedFile(file.GeneratedFilenamePrefix+commonFilename, "")
	g.P("// Code generated by protoc-gen-go-orm. DO NOT EDIT.")
	g.P("package ", file.GoPackageName) // Use the package name of the first file
	g.P()

	// Define the StringFilterInput struct
	g.P("type StringFilterInput struct { // nolint:unused")
	g.P("    Eq           string")
	g.P("    Ne           string")
	g.P("    Lt           string")
	g.P("    Le           string")
	g.P("    Gt           string")
	g.P("    Ge           string")
	g.P("    Contains     string")
	g.P("    NotContains  string")
	g.P("}")
	g.P()

	// Define the Pagination struct
	g.P("type Pagination struct {")
	g.P("    Page  int")
	g.P("    Limit int")
	g.P("}")
	g.P()
}
