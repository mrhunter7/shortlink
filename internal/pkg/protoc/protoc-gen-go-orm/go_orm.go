package main

import (
	"fmt"
	"log"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	version        = "1.1.0"
	commonFilename = "common_types.orm.go" // Name of the file where common types are defined
)

func main() {
	log.Println("protoc-go-orm version", version, "is called")

	// The main function runs the plugin.
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		log.Println("Running with protoc version:", protocVersion(gen))

		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}

			// Generate the common types file
			generateCommonFile(gen, f)

			// Generate ORM
			generateFile(gen, f)
		}

		return nil
	})
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}

	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + ".orm.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-orm. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-orm v" + version)
	g.P("// - protoc             ", protocVersion(gen))
	g.P("// source: ", file.Desc.Path())
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	// Add import for Squirrel
	g.P("import (")
	g.P("\"strings\"")
	g.P("\"github.com/Masterminds/squirrel\"")
	g.P("\"go.mongodb.org/mongo-driver/bson\"")
	// Add any other imports your generated code needs
	g.P(")")
	g.P()

	processFile(file, g)
}

func processFile(file *protogen.File, g *protogen.GeneratedFile) {
	for _, message := range file.Messages {
		generateStructForMessage(message, g)
	}
}

func generateStructForMessage(message *protogen.Message, g *protogen.GeneratedFile) {
	// Generate the BuildFilter method
	structName := "Filter" + message.GoIdent.GoName
	g.P("type ", structName, " struct {")
	for _, field := range message.Fields {
		if field.Desc.IsList() || field.Desc.IsMap() {
			continue
		}

		fieldName := field.GoName
		goType := "*" + "StringFilterInput"
		g.P(fieldName, " ", goType, " `json:\"", strings.ToLower(fieldName), "\"`")
	}
	g.P("}")
	g.P()

	generateBuildFilterMethod(g, structName, message.Fields)
	generateBuildMongoFilterMethod(g, structName, message.Fields)
}

func generateCommonFile(gen *protogen.Plugin, file *protogen.File) {
	name := strings.Split(file.GeneratedFilenamePrefix, "/")
	name = append(name[:len(name)-1], commonFilename)
	filename := strings.Join(name, "/")
	g := gen.NewGeneratedFile(filename, "")
	g.P("// Code generated by protoc-gen-go-orm. DO NOT EDIT.")
	g.P("package ", file.GoPackageName) // Use the package name of the first file
	g.P()

	// Generate the StringFilterInput struct definition
	g.P("type StringFilterInput struct { // nolint:unused")
	g.P("    Eq           string    `json:\"eq,omitempty\"`")          // Equal
	g.P("    Ne           string    `json:\"ne,omitempty\"`")          // Not Equal
	g.P("    Lt           string    `json:\"lt,omitempty\"`")          // Less Than
	g.P("    Le           string    `json:\"le,omitempty\"`")          // Less Than or Equal
	g.P("    Gt           string    `json:\"gt,omitempty\"`")          // Greater Than
	g.P("    Ge           string    `json:\"ge,omitempty\"`")          // Greater Than or Equal
	g.P("    Contains     []string  `json:\"contains,omitempty\"`")    // Contains
	g.P("    NotContains  []string  `json:\"notContains,omitempty\"`") // Not Contains
	g.P("    StartsWith   string    `json:\"startsWith,omitempty\"`")  // Starts With
	g.P("    EndsWith     string    `json:\"endsWith,omitempty\"`")    // Ends With
	g.P("    IsEmpty      bool      `json:\"isEmpty,omitempty\"`")     // Is Empty
	g.P("    IsNotEmpty   bool      `json:\"isNotEmpty,omitempty\"`")  // Is Not Empty
	g.P("}")
	g.P()
}

func generateBuildFilterMethod(g *protogen.GeneratedFile, structName string, fields []*protogen.Field) {
	g.P("func (f *", structName, ") BuildFilter(query squirrel.SelectBuilder) squirrel.SelectBuilder {")

	for _, field := range fields {
		if field.Desc.IsList() || field.Desc.IsMap() {
			continue
		}
		fieldName := field.GoName
		dbColumnName := strings.ToLower(fieldName)
		generateFieldFilterConditions(g, fieldName, dbColumnName)
	}

	g.P("return query")
	g.P("}")
}

func generateFieldFilterConditions(g *protogen.GeneratedFile, fieldName, dbColumnName string) {
	conditions := []string{"Eq", "Ne", "Lt", "Le", "Gt", "Ge", "StartsWith", "EndsWith"}
	operators := []string{"=", "<>", "<", "<=", ">", ">=", "LIKE", "LIKE"}

	g.P("if f.", fieldName, " != nil {") // nil pointer check

	for i, cond := range conditions {
		op := operators[i]
		valuePlaceholder := "?"
		if cond == "StartsWith" {
			valuePlaceholder = "'%' || ?"
		} else if cond == "EndsWith" {
			valuePlaceholder = "? || '%'"
		}
		g.P("if f.", fieldName, ".", cond, " != \"\" {")
		g.P("query = query.Where(\"", dbColumnName, " ", op, " ", valuePlaceholder, "\", f.", fieldName, ".", cond, ")")
		g.P("}")
	}

	// Handle Contains
	g.P("if len(f.", fieldName, ".Contains) > 0 {")
	g.P("containsQueries := []string{}")
	g.P("containsArgs := []interface{}{}")
	g.P("for _, v := range f.", fieldName, ".Contains {")
	g.P("    if v != \"\" {")
	g.P("        containsQueries = append(containsQueries, \"", dbColumnName, " LIKE ?\")")
	g.P("        containsArgs = append(containsArgs, \"%\" + v + \"%\")")
	g.P("    }")
	g.P("}")
	g.P("if len(containsQueries) > 0 {")
	g.P("    query = query.Where(\"(\" + strings.Join(containsQueries, \" OR \") + \")\", containsArgs...)")
	g.P("}")
	g.P("}")

	// Handle NotContains
	g.P("if len(f.", fieldName, ".NotContains) > 0 {")
	g.P("notContainsQueries := []string{}")
	g.P("notContainsArgs := []interface{}{}")
	g.P("for _, v := range f.", fieldName, ".NotContains {")
	g.P("    if v != \"\" {")
	g.P("        notContainsQueries = append(notContainsQueries, \"", dbColumnName, " NOT LIKE ?\")")
	g.P("        notContainsArgs = append(notContainsArgs, \"%\" + v + \"%\")")
	g.P("    }")
	g.P("}")
	g.P("if len(notContainsQueries) > 0 {")
	g.P("    query = query.Where(\"(\" + strings.Join(notContainsQueries, \" OR \") + \")\", notContainsArgs...)")
	g.P("}")
	g.P("}")

	g.P("if f.", fieldName, ".IsEmpty {")
	g.P("query = query.Where(\"", dbColumnName, " = '' OR ", dbColumnName, " IS NULL\")")
	g.P("}")

	g.P("if f.", fieldName, ".IsNotEmpty {")
	g.P("query = query.Where(\"", dbColumnName, " <> '' AND ", dbColumnName, " IS NOT NULL\")")
	g.P("}")

	g.P("}") // End of nil pointer check
}
