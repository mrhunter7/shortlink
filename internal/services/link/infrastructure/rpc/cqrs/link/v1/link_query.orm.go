// Code generated by protoc-gen-go-orm. DO NOT EDIT.
// versions:
// - protoc-gen-go-orm v1.0.0
// - protoc             (unknown)
// source: infrastructure/rpc/cqrs/link/v1/link_query.proto

package v1

import (
	"github.com/Masterminds/squirrel"
)

type FilterGetRequest struct {
	Hash       *StringFilterInput `json:"hash"`
	Pagination *Pagination        `json:"pagination,omitempty"`
}

func (f *FilterGetRequest) BuildFilter(query squirrel.SelectBuilder) squirrel.SelectBuilder {
	if f.Hash != nil {
		if f.Hash.Eq != "" {
			query = query.Where("hash = ?", f.Hash.Eq)
		}
		if f.Hash.Ne != "" {
			query = query.Where("hash <> ?", f.Hash.Ne)
		}
		if f.Hash.Lt != "" {
			query = query.Where("hash < ?", f.Hash.Lt)
		}
		if f.Hash.Le != "" {
			query = query.Where("hash <= ?", f.Hash.Le)
		}
		if f.Hash.Gt != "" {
			query = query.Where("hash > ?", f.Hash.Gt)
		}
		if f.Hash.Ge != "" {
			query = query.Where("hash >= ?", f.Hash.Ge)
		}
		if f.Hash.Contains != "" {
			query = query.Where("hash LIKE '%' || ?", f.Hash.Contains)
		}
		if f.Hash.NotContains != "" {
			query = query.Where("hash NOT LIKE ?", f.Hash.NotContains)
		}
		if f.Hash.StartsWith != "" {
			query = query.Where("hash LIKE '%' || ?", f.Hash.StartsWith)
		}
		if f.Hash.EndsWith != "" {
			query = query.Where("hash LIKE ? || '%'", f.Hash.EndsWith)
		}
		if f.Hash.IsEmpty {
			query = query.Where("hash = '' OR hash IS NULL")
		}
		if f.Hash.IsNotEmpty {
			query = query.Where("hash <> '' AND hash IS NOT NULL")
		}
	}
	if f.Pagination != nil {
		if f.Pagination.Page > 0 && f.Pagination.Limit > 0 {
			offset := (f.Pagination.Page - 1) * f.Pagination.Limit
			query = query.Limit(uint64(f.Pagination.Limit)).Offset(uint64(offset))
		} else if f.Pagination.Limit > 0 {
			query = query.Limit(uint64(f.Pagination.Limit))
		}
	}
	return query
}

type FilterGetResponse struct {
	Link       *StringFilterInput `json:"link"`
	Pagination *Pagination        `json:"pagination,omitempty"`
}

func (f *FilterGetResponse) BuildFilter(query squirrel.SelectBuilder) squirrel.SelectBuilder {
	if f.Link != nil {
		if f.Link.Eq != "" {
			query = query.Where("link = ?", f.Link.Eq)
		}
		if f.Link.Ne != "" {
			query = query.Where("link <> ?", f.Link.Ne)
		}
		if f.Link.Lt != "" {
			query = query.Where("link < ?", f.Link.Lt)
		}
		if f.Link.Le != "" {
			query = query.Where("link <= ?", f.Link.Le)
		}
		if f.Link.Gt != "" {
			query = query.Where("link > ?", f.Link.Gt)
		}
		if f.Link.Ge != "" {
			query = query.Where("link >= ?", f.Link.Ge)
		}
		if f.Link.Contains != "" {
			query = query.Where("link LIKE '%' || ?", f.Link.Contains)
		}
		if f.Link.NotContains != "" {
			query = query.Where("link NOT LIKE ?", f.Link.NotContains)
		}
		if f.Link.StartsWith != "" {
			query = query.Where("link LIKE '%' || ?", f.Link.StartsWith)
		}
		if f.Link.EndsWith != "" {
			query = query.Where("link LIKE ? || '%'", f.Link.EndsWith)
		}
		if f.Link.IsEmpty {
			query = query.Where("link = '' OR link IS NULL")
		}
		if f.Link.IsNotEmpty {
			query = query.Where("link <> '' AND link IS NOT NULL")
		}
	}
	if f.Pagination != nil {
		if f.Pagination.Page > 0 && f.Pagination.Limit > 0 {
			offset := (f.Pagination.Page - 1) * f.Pagination.Limit
			query = query.Limit(uint64(f.Pagination.Limit)).Offset(uint64(offset))
		} else if f.Pagination.Limit > 0 {
			query = query.Limit(uint64(f.Pagination.Limit))
		}
	}
	return query
}

type FilterListRequest struct {
	Filter     *StringFilterInput `json:"filter"`
	Pagination *Pagination        `json:"pagination,omitempty"`
}

func (f *FilterListRequest) BuildFilter(query squirrel.SelectBuilder) squirrel.SelectBuilder {
	if f.Filter != nil {
		if f.Filter.Eq != "" {
			query = query.Where("filter = ?", f.Filter.Eq)
		}
		if f.Filter.Ne != "" {
			query = query.Where("filter <> ?", f.Filter.Ne)
		}
		if f.Filter.Lt != "" {
			query = query.Where("filter < ?", f.Filter.Lt)
		}
		if f.Filter.Le != "" {
			query = query.Where("filter <= ?", f.Filter.Le)
		}
		if f.Filter.Gt != "" {
			query = query.Where("filter > ?", f.Filter.Gt)
		}
		if f.Filter.Ge != "" {
			query = query.Where("filter >= ?", f.Filter.Ge)
		}
		if f.Filter.Contains != "" {
			query = query.Where("filter LIKE '%' || ?", f.Filter.Contains)
		}
		if f.Filter.NotContains != "" {
			query = query.Where("filter NOT LIKE ?", f.Filter.NotContains)
		}
		if f.Filter.StartsWith != "" {
			query = query.Where("filter LIKE '%' || ?", f.Filter.StartsWith)
		}
		if f.Filter.EndsWith != "" {
			query = query.Where("filter LIKE ? || '%'", f.Filter.EndsWith)
		}
		if f.Filter.IsEmpty {
			query = query.Where("filter = '' OR filter IS NULL")
		}
		if f.Filter.IsNotEmpty {
			query = query.Where("filter <> '' AND filter IS NOT NULL")
		}
	}
	if f.Pagination != nil {
		if f.Pagination.Page > 0 && f.Pagination.Limit > 0 {
			offset := (f.Pagination.Page - 1) * f.Pagination.Limit
			query = query.Limit(uint64(f.Pagination.Limit)).Offset(uint64(offset))
		} else if f.Pagination.Limit > 0 {
			query = query.Limit(uint64(f.Pagination.Limit))
		}
	}
	return query
}

type FilterListResponse struct {
	Links      *StringFilterInput `json:"links"`
	Pagination *Pagination        `json:"pagination,omitempty"`
}

func (f *FilterListResponse) BuildFilter(query squirrel.SelectBuilder) squirrel.SelectBuilder {
	if f.Links != nil {
		if f.Links.Eq != "" {
			query = query.Where("links = ?", f.Links.Eq)
		}
		if f.Links.Ne != "" {
			query = query.Where("links <> ?", f.Links.Ne)
		}
		if f.Links.Lt != "" {
			query = query.Where("links < ?", f.Links.Lt)
		}
		if f.Links.Le != "" {
			query = query.Where("links <= ?", f.Links.Le)
		}
		if f.Links.Gt != "" {
			query = query.Where("links > ?", f.Links.Gt)
		}
		if f.Links.Ge != "" {
			query = query.Where("links >= ?", f.Links.Ge)
		}
		if f.Links.Contains != "" {
			query = query.Where("links LIKE '%' || ?", f.Links.Contains)
		}
		if f.Links.NotContains != "" {
			query = query.Where("links NOT LIKE ?", f.Links.NotContains)
		}
		if f.Links.StartsWith != "" {
			query = query.Where("links LIKE '%' || ?", f.Links.StartsWith)
		}
		if f.Links.EndsWith != "" {
			query = query.Where("links LIKE ? || '%'", f.Links.EndsWith)
		}
		if f.Links.IsEmpty {
			query = query.Where("links = '' OR links IS NULL")
		}
		if f.Links.IsNotEmpty {
			query = query.Where("links <> '' AND links IS NOT NULL")
		}
	}
	if f.Pagination != nil {
		if f.Pagination.Page > 0 && f.Pagination.Limit > 0 {
			offset := (f.Pagination.Page - 1) * f.Pagination.Limit
			query = query.Limit(uint64(f.Pagination.Limit)).Offset(uint64(offset))
		} else if f.Pagination.Limit > 0 {
			query = query.Limit(uint64(f.Pagination.Limit))
		}
	}
	return query
}
