package main

import (
	"fmt"
	"log"
	"strings"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"google.golang.org/protobuf/compiler/protogen"
)

const (
	version = "1.0.0"
)

func main() {
	log.Println("protoc-rich-model version:", version)

	// The main function runs the plugin.
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		log.Println("Running with protoc version:", protocVersion(gen))

		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}

			for _, message := range f.Messages {
				generateRichModel(gen, f, message) // Generate rich model for each message
			}
		}

		return nil
	})
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

func generateRichModel(gen *protogen.Plugin, file *protogen.File, message *protogen.Message) {
	// Adjust the filename to follow the '<typeName>.ddd.go' pattern
	filename := fmt.Sprintf("%s.ddd.go", message.GoIdent.GoName)
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-rich-model. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-rich-model v" + version)
	g.P("// - protoc             ", protocVersion(gen))
	g.P("// source: ", file.Desc.Path())
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	// Define a titler for the English language
	titler := cases.Title(language.English)

	// Generate a rich model struct
	structName := strings.ToLower(message.GoIdent.GoName[:1]) + message.GoIdent.GoName[1:]
	g.P("type ", structName, " struct {")
	g.P(message.GoIdent.GoName)
	for _, field := range message.Fields {
		fieldName := titler.String(field.GoName)
		goType := field.GoIdent.GoName
		if field.Desc.IsList() {
			goType = "[]" + goType
		}
		g.P(fieldName, " ", goType)
	}
	// Example of adding a custom field
	g.P("CustomField string // an example of a custom field")
	g.P("}")
	g.P()
}
