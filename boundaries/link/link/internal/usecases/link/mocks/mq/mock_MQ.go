// Code generated by mockery v2.36.1. DO NOT EDIT.

package mq

import (
	context "context"

	logger "github.com/shortlink-org/shortlink/pkg/logger"
	mock "github.com/stretchr/testify/mock"

	query "github.com/shortlink-org/shortlink/pkg/mq/query"
)

// MockMQ is an autogenerated mock type for the MQ type
type MockMQ struct {
	mock.Mock
}

type MockMQ_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMQ) EXPECT() *MockMQ_Expecter {
	return &MockMQ_Expecter{mock: &_m.Mock}
}

// Init provides a mock function with given fields: ctx, log
func (_m *MockMQ) Init(ctx context.Context, log logger.Logger) error {
	ret := _m.Called(ctx, log)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, logger.Logger) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMQ_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockMQ_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx context.Context
//   - log logger.Logger
func (_e *MockMQ_Expecter) Init(ctx interface{}, log interface{}) *MockMQ_Init_Call {
	return &MockMQ_Init_Call{Call: _e.mock.On("Init", ctx, log)}
}

func (_c *MockMQ_Init_Call) Run(run func(ctx context.Context, log logger.Logger)) *MockMQ_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(logger.Logger))
	})
	return _c
}

func (_c *MockMQ_Init_Call) Return(_a0 error) *MockMQ_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMQ_Init_Call) RunAndReturn(run func(context.Context, logger.Logger) error) *MockMQ_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, target, routingKey, payload
func (_m *MockMQ) Publish(ctx context.Context, target string, routingKey []byte, payload []byte) error {
	ret := _m.Called(ctx, target, routingKey, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, []byte) error); ok {
		r0 = rf(ctx, target, routingKey, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMQ_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockMQ_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - target string
//   - routingKey []byte
//   - payload []byte
func (_e *MockMQ_Expecter) Publish(ctx interface{}, target interface{}, routingKey interface{}, payload interface{}) *MockMQ_Publish_Call {
	return &MockMQ_Publish_Call{Call: _e.mock.On("Publish", ctx, target, routingKey, payload)}
}

func (_c *MockMQ_Publish_Call) Run(run func(ctx context.Context, target string, routingKey []byte, payload []byte)) *MockMQ_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte), args[3].([]byte))
	})
	return _c
}

func (_c *MockMQ_Publish_Call) Return(_a0 error) *MockMQ_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMQ_Publish_Call) RunAndReturn(run func(context.Context, string, []byte, []byte) error) *MockMQ_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: ctx, target, message
func (_m *MockMQ) Subscribe(ctx context.Context, target string, message query.Response) error {
	ret := _m.Called(ctx, target, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, query.Response) error); ok {
		r0 = rf(ctx, target, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMQ_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockMQ_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - target string
//   - message query.Response
func (_e *MockMQ_Expecter) Subscribe(ctx interface{}, target interface{}, message interface{}) *MockMQ_Subscribe_Call {
	return &MockMQ_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, target, message)}
}

func (_c *MockMQ_Subscribe_Call) Run(run func(ctx context.Context, target string, message query.Response)) *MockMQ_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(query.Response))
	})
	return _c
}

func (_c *MockMQ_Subscribe_Call) Return(_a0 error) *MockMQ_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMQ_Subscribe_Call) RunAndReturn(run func(context.Context, string, query.Response) error) *MockMQ_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// UnSubscribe provides a mock function with given fields: target
func (_m *MockMQ) UnSubscribe(target string) error {
	ret := _m.Called(target)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMQ_UnSubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnSubscribe'
type MockMQ_UnSubscribe_Call struct {
	*mock.Call
}

// UnSubscribe is a helper method to define mock.On call
//   - target string
func (_e *MockMQ_Expecter) UnSubscribe(target interface{}) *MockMQ_UnSubscribe_Call {
	return &MockMQ_UnSubscribe_Call{Call: _e.mock.On("UnSubscribe", target)}
}

func (_c *MockMQ_UnSubscribe_Call) Run(run func(target string)) *MockMQ_UnSubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMQ_UnSubscribe_Call) Return(_a0 error) *MockMQ_UnSubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMQ_UnSubscribe_Call) RunAndReturn(run func(string) error) *MockMQ_UnSubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMQ creates a new instance of MockMQ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMQ(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMQ {
	mock := &MockMQ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
