syntax = "proto3";

package infrastructure.rpc.cart.v1;

option go_package = "github.com/shortlink-org/shortlink/boundaries/shop/oms/internal/infrastructure/rpc/cart/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "buf/validate/validate.proto";

// CartState is the cart state message.
message CartState {
  // Field mask
  google.protobuf.FieldMask field_mask = 6;

  // Cart ID
  string cart_id = 1;
  // User ID
  string customer_id = 2;
  // Items, all quantities must be positive
  map<string, int32> items = 3 [(buf.validate.field).map.values.int32.gt = 0];
  // Created at
  google.protobuf.Timestamp created_at = 4;
  // Updated at
  google.protobuf.Timestamp updated_at = 5;
}

// CartService is the service that provides cart operations.
service CartService {
  // Add adds an item to the cart.
  rpc Add(AddRequest) returns (google.protobuf.Empty);

  // Remove removes an item from the cart.
  rpc Remove(RemoveRequest) returns (google.protobuf.Empty);

  // Get gets the state of the cart.
  rpc Get(GetRequest) returns (GetResponse);

  // Reset clears the cart.
  rpc Reset(ResetRequest) returns (google.protobuf.Empty);
}

// AddRequest is the request message for adding an item to the cart.
message AddRequest {
  // Cart ID
  string customer_id = 1 [(buf.validate.field).required = true];
  // Item to add, all quantities must be positive
  map<string, int32> items = 2 [(buf.validate.field).map.values.int32.gt = 0];
}

// RemoveRequest is the request message for removing an item from the cart.
message RemoveRequest {
  // Cart ID
  string customer_id = 1 [(buf.validate.field).required = true];
  // Item to remove, all quantities must be positive
  map<string, int32> items = 2 [(buf.validate.field).map.values.int32.gt = 0];
}

// GetRequest is the request message for getting the cart state.
message GetRequest {
  // Cart ID
  string customer_id = 1 [(buf.validate.field).required = true];
}

// GetResponse is the response message for getting the cart state.
message GetResponse {
  // Cart state
  CartState state = 1;
}

// ResetRequest is the request message for resetting the cart.
message ResetRequest {
  // Cart ID
  string customer_id = 1 [(buf.validate.field).required = true];
}
